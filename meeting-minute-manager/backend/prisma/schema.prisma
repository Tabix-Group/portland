model Minute {
  id          String   @id @default(uuid())
  number      Int
  title       String
  meetingDate String
  meetingTime String
  nextMeetingDate String?
  nextMeetingTime String?
  nextMeetingNotes String?
  participantIds String[]
  participants Json
  occasionalParticipants Json
  informedPersons Json
  topicGroups Json
  topicsDiscussed Json
  decisions Json
  pendingTasks Json // legacy, no usar para nuevas tareas
  tasks     Task[]
  internalNotes String?
  tags Json
  files Json
  status String
  createdBy String
  createdAt DateTime @default(now())
  projectIds String[]
  externalMentions  String[]
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String
  isActive  Boolean  @default(true)
  projectIds String[]
  hasLimitedAccess Boolean? 
  projects  Project[] @relation("UserProjects")
  minutes   MinuteItem[]
  tasks     Task[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  userIds     String[]
  color       String?
  users       User[]   @relation("UserProjects")
  minutes     MinuteItem[]
  tasks       Task[]
}

model MinuteItem {
  id         String   @id @default(uuid())
  text       String
  mentions   String[]
  projectIds String[]
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Task {
  id         String   @id @default(uuid())
  text       String
  assignedTo String?
  dueDate    DateTime?
  completed  Boolean  @default(false)
  mentions   String[]
  projectIds String[]
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  minute     Minute?  @relation(fields: [minuteId], references: [id])
  minuteId   String?
  groupId    String?  // Permite asociar la tarea a un agrupador de temas
}

model FileAttachment {
  id         String   @id @default(uuid())
  name       String
  url        String
  type       String
  size       Int
  uploadedBy String
  uploadedAt DateTime
}


model Tag {
  id    String   @id @default(uuid())
  name  String
  color String
}

model TemplateTopicGroup {
  id          String   @id @default(uuid())
  name        String
  color       String
  description String?
  templateId  String
  template    MinuteTemplate @relation(fields: [templateId], references: [id])
}

model MinuteTemplate {
  id          String   @id @default(uuid())
  name        String
  description String
  icon        String
  color       String
  isCustom    Boolean
  createdBy   String?
  projectIds  String[]
  sections    Json
  topicGroups TemplateTopicGroup[]
}

model GlobalTopicGroup {
  id          String   @id @default(uuid())
  name        String
  color       String
  description String?
  isActive    Boolean @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
}
